"""
sess_file_util.py

This module contains functions for loading and reading from data 
files generated by the Allen Institute OpenScope experiments for the Credit 
Assignment Project.

Authors: Colleen Gillon, Blake Richards

Date: August, 2018

Note: this code uses python 3.7.

"""

import glob
from pathlib import Path
import warnings

from util import gen_util


#############################################
def get_nwb_sess_paths(maindir, sess_id, mouseid=None):
    """
    get_nwb_sess_paths(maindir, sess_id)

    Returns a list of NWB session data path names for the DANDI Credit 
    Assignment session requested.

    Several files may be found if they contain different types of information 
    (e.g., behavior, image, ophys).
 
    Required arguments:
        - maindir (str): path of the main data directory
        - sess_id (str): session ID on Dandi

    Optional arguments
        - mouseid (str) : mouse 6-digit ID string optionally used to check 
                          whether files are for the expected mouse number
                          e.g. "389778"

    Returns:
        - sess_files (list): full path names of the session files
    """

    
    dandi_form = f"*ses-{sess_id}*.nwb"
    if mouseid is not None:
        dandi_form = f"sub-{mouseid}_{dandi_form}"
    dandi_glob_path = Path(maindir, "**", dandi_form)
    sess_files = sorted(glob.glob(str(dandi_glob_path), recursive=True))

    if len(sess_files) == 0:
        raise RuntimeError(
            "Found no NWB sessions of the expected form "
            f"{dandi_form} under {maindir}."
            )

    else:
        sess_files = [Path(sess_file) for sess_file in sess_files]
        return sess_files


#############################################
def select_nwb_sess_path(sess_files, ophys=False, behav=False, stim=False, 
                         warn_multiple=False):
    """
    select_nwb_sess_path(sess_files)

    Returns an NWB session data path name, selected from a list according to 
    the specified criteria.
 
    Required arguments:
        - sess_files (list): full path names of the session files

    Optional arguments
        - ophys (bool)        : if True, only session files with optical 
                                physiology data are retained
                                default: False
        - behav (bool)        : if True, only session files with behaviour 
                                data are retained
                                default: False
        - stim (bool)         : if True, only session files with stimulus 
                                images are retained
                                default: False
        - warn_multiple (bool): if True, a warning if thrown if multiple 
                                matching session files are found
                                default: False

    Returns:
        - sess_file (Path): full path name of the selected session file
    """

    sess_files = gen_util.list_if_not(sess_files)
    
    criterion_dict = {
        "ophys"   : [ophys, "optical physiology"],
        "behavior": [behav, "behavioral"],
        "image"   : [stim, "stimulus template"],        
        }

    data_names = []
    for data_str, [data_bool, data_name] in criterion_dict.items():
        if data_bool:
            sess_files = [
                sess_file for sess_file in sess_files 
                if data_str in str(sess_file)
            ]
            data_names.append(data_name)
    
    tog_str = "" if len(data_names) < 2 else " together"
    data_names = ", and ".join(data_names).lower()

    if len(sess_files) == 0:
        raise RuntimeError(
            f"{data_names.capitalize()} data not included{tog_str} in this "
            "session's NWB files."
            )
    
    sess_file = sess_files[0]
    if len(sess_files) > 1 and warn_multiple:
        data_names_str = f" with {data_names} data" if len(data_names) else ""
        warnings.warn(
            f"Several session files{data_names_str} found{tog_str}. "
            f"Using the first listed: {sess_file}."
            )

    return sess_file


#############################################
def get_local_nway_match_path_from_sessid(sessid):
    """
    get_local_nway_match_path_from_sessid(sessid)

    Returns the full path name for the nway match file stored in the repository 
    main directory for the specified session.

    Required args:
        - sessid (int)  : session ID

    Returns:
        - nway_match_path (path): n-way match path
    """

    tracking_dir = Path(Path(__file__).resolve().parent.parent, "roi_tracking")

    if tracking_dir.exists():
        nway_path_pattern = Path(
            tracking_dir, "**", f"*session_{sessid}__nway_matched_rois.json"
            )
        matching_files = glob.glob(str(nway_path_pattern), recursive=True)
        if len(matching_files) == 0:
            raise RuntimeError(
                f"Found no local nway match file for session {sessid} in "
                f"{tracking_dir}."
                )
        elif len(matching_files) > 1:
            raise NotImplementedError(
                f"Found multiple local nway match files for session {sessid} "
                f"in {tracking_dir}."
                )
        else:
            nway_match_path =  Path(matching_files[0])
    else:
        raise RuntimeError(
            "Expected to find the 'roi_tracking' directory in the main "
            f"repository folder: {tracking_dir}"
            )

    return nway_match_path

